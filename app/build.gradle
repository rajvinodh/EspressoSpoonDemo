buildscript {
    repositories {
        google()
        mavenCentral()
        jcenter()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local/' }
        maven { url 'https://plugins.gradle.org/m2/' }
        maven {
            url 'https://artifactory.phonepe.com/repository/snapshots/'
        }
        maven {
            url 'https://artifactory.phonepe.com/repository/releases/'
        }
        mavenLocal()
    }

    dependencies {
        classpath 'com.jaredsburrows:gradle-spoon-plugin:2.14-SNAPSHOT'
//        classpath 'com.phonepe:app-core:1.0-SNAPSHOT'
//        classpath 'org.jacoco:org.jacoco.core:0.8.8'
    }

}

apply plugin: 'com.android.application'
apply plugin: 'com.jaredsburrows.spoon'
apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.8'
}

repositories {
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    mavenLocal()
}


dependencies {
    implementation project(':reusable-activities')
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.3'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'org.apache.httpcomponents:httpclient-android:4.3.5+'
    implementation 'commons-io:commons-io:2.11.0'

    androidTestImplementation 'androidx.test:runner:1.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'
    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'com.squareup.spoon:spoon-client:3.13-SNAPSHOT'
    androidTestImplementation 'com.squareup.spoon:spoon-internal-axmlparser:3.13-SNAPSHOT'
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.3.0-alpha01'
    androidTestImplementation 'net.lightbody.bmp:browsermob-core:2.1.5'
    androidTestImplementation "io.qameta.allure:allure-kotlin-model:2.2.6"
    androidTestImplementation "io.qameta.allure:allure-kotlin-commons:2.2.6"
    androidTestImplementation "io.qameta.allure:allure-kotlin-junit4:2.2.6"
    androidTestImplementation "io.qameta.allure:allure-kotlin-android:2.2.6"
    androidTestImplementation "androidx.fragment:fragment-testing:1.5.4"
    androidTestUtil "androidx.test:orchestrator:1.4.2"

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.robolectric:robolectric:4.8.1'
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation 'androidx.test:runner:1.5.1'
    testImplementation 'androidx.test.ext:junit:1.1.4'
    testImplementation 'androidx.test.ext:truth:1.5.0'
    testImplementation 'androidx.test.espresso:espresso-core:3.5.0'
    testImplementation 'androidx.test.espresso:espresso-intents:3.5.0'

    androidTestImplementation "androidx.test.services:test-services:1.4.2"
    androidTestImplementation "androidx.test.services:storage:1.4.2"

    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    testImplementation "org.junit.platform:junit-platform-reporting:1.9.1"
}
android {
    compileSdkVersion 33
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.emmasuzuki.espressospoon"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
        multiDexEnabled true

        testInstrumentationRunner "io.qameta.allure.android.runners.AllureAndroidJUnitRunner"
        testInstrumentationRunnerArguments useTestStorageService: 'true'
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        resources {
            excludes += ['LICENSE.txt']
        }
    }


    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    namespace 'com.emmasuzuki.espressospoondemo'
    testNamespace 'com.emmasuzuki.espressospoon'
}

spoon {
    File spoonOutput = file("$buildDir/spoon-output")

    if (spoonOutput.exists()) {
        println("Deleting spoon-output directory")
        spoonOutput.delete()
    }

    File allureOutput = file("$buildDir/allure-output")

    if (allureOutput.exists()) {
        println("Deleting allure-output directory")
        allureOutput.delete()
    }

    debug = true
    allureRunner = true

    if (project.hasProperty("PhonepeExecution")) {
        println(String.format("PhonepeExecution is passed: %s", project.PhonepeExecution))
        if (project.PhonepeExecution == "true") {
            phonepeExecution = true
        } else {
            phonepeExecution = false
        }
    }


    if (project.hasProperty("ClassLevelExecution")) {
        println(String.format("ClassLevelExecution is passed: %s", project.ClassLevelExecution))
        if (project.ClassLevelExecution == "true") {
            classLevelExecution = true
        } else {
            classLevelExecution = false
        }
    }


    deviceAvailabilityTimeout = 2
    devicePing = 10

    baseOutputDir = file("$buildDir/custom-report-dir")
    baseAllureDir = file("$buildDir/custom-allure-dir")


    if (project.hasProperty("spoonClassName")) {
        className = project.spoonClassName

        if (project.hasProperty("spoonMethodName")) {
            methodName = project.spoonMethodName
        }
    }

    ignoreFailures = true

    if (project.hasProperty("TestGroup") && project.hasProperty("ExecutionType") && project.ExecutionType != "LEGACY") {
        throw new InvalidUserDataException("When ExecutionType is anything other than LEGACY, TestGroup shouldn't be passed")
    }

    if (project.hasProperty("TestGroup")) {

        String annotationFilePath = String.format(
                "$rootDir/app/src/androidTest/java/com/emmasuzuki/espressospoondemo/utils/annotations/%s.java",
                project.TestGroup)
        File testGroup = file(annotationFilePath)

        if (testGroup.exists()) {

            if (project.hasProperty("RealDevice")) {
                if (project.RealDevice == "true") {
                    instrumentationArgs = ["annotation=com.emmasuzuki.espressospoondemo.utils.annotations." + project.TestGroup +
                                                   "," + "com.emmasuzuki.espressospoondemo.utils.annotations." + "RealDevice",
                                           "listener=com.emmasuzuki.espressospoondemo.utils.AnnotationsTestPrinter"]
                } else {
                    instrumentationArgs = ["annotation=com.emmasuzuki.espressospoondemo.utils.annotations." + project.TestGroup,
                                           "notAnnotation=com.emmasuzuki.espressospoondemo.utils.annotations." + "RealDevice",
                                           "listener=com.emmasuzuki.espressospoondemo.utils.AnnotationsTestPrinter"]
                }
            } else {
                instrumentationArgs = ["annotation=com.emmasuzuki.espressospoondemo.utils.annotations." + project.TestGroup,
                                       "listener=com.emmasuzuki.espressospoondemo.utils.AnnotationsTestPrinter"]
            }

            title = project.TestGroup
        } else {
            throw new InvalidUserDataException(String.format("%s is invlaid testgroup, %s annotation itself is not present", project.TestGroup, annotationFilePath))
        }
    } else {
        instrumentationArgs = ["listener=com.emmasuzuki.espressospoondemo.utils.AnnotationsTestPrinter"]
    }

    if (project.hasProperty("InstrumentParams")) {
        println(String.format("InstrumentParams is passed: %s", project.InstrumentParams))
        String[] eachParamArray = project.InstrumentParams.split(",")
        for (String eachParam : eachParamArray) {
            println(String.format("Instrumentation Args set: %s", eachParam))
            instrumentationArgs.add(eachParam)
        }
    }


    shard = true
    codeCoverage = false
    grantAllPermissions = true

    if (project.hasProperty(('Devices'))) devices = project.Devices.split(",")

    if (project.hasProperty(('AdbTimeout'))) adbTimeout = Integer.parseInt(project.AdbTimeout)

    if (project.hasProperty(('FileTransferTimeout'))) fileTransferTimeout = Integer.parseInt(project.FileTransferTimeout)

    retryTimes = 1
    deviceEligibilityChecker = true
    deviceEligibilityAnnotation = "com.emmasuzuki.espressospoondemo.utils.annotations.DeviceEligibilityTest"
    deviceEligibilityLoopCount = 1

    if (project.hasProperty("PreBuiltApp")) {
        println(String.format("PreBuiltApp is passed: %s", project.PreBuiltApp))
        if (project.PreBuiltApp == "true") {
            preBuiltApp = true
        } else {
            preBuiltApp = false
        }
    }


    if (project.hasProperty("InstrumentationApp")) {
        instrumentationApp = project.InstrumentationApp
    }

    if (project.hasProperty("TargetApp")) {
        targetApp = project.TargetApp
    }

    if (project.hasProperty("RecordVideo")) {
        println(String.format("RecordVideo is passed: %s", project.RecordVideo))
        if (project.RecordVideo == "true") {
            recordVideo = true
        } else {
            recordVideo = false
        }
    }

    if (project.hasProperty("TrackLogcat")) {
        println(String.format("TrackLogcat is passed: %s", project.TrackLogcat))
        if (project.TrackLogcat == "true") {
            trackLogcat = true
        } else {
            trackLogcat = false
        }
    }

    if (project.hasProperty("TrackNetworkLogs")) {
        println(String.format("TrackNetworkLogs is passed: %s", project.TrackNetworkLogs))
        if (project.TrackNetworkLogs == "true") {
            trackNetworkLogs = true
        } else {
            trackNetworkLogs = false
        }
    }

    noAnimations = true

    if (project.hasProperty("ExecutionType")) {
        println(String.format("ExecutionType is passed: %s", project.ExecutionType))
        executionType = project.ExecutionType
    } else {
        executionType = "LEGACY"
    }

    if (project.hasProperty("TestSource")) {
        println(String.format("TestSource is passed: %s", project.TestSource))
        testSource = project.TestSource
    }

    if (project.hasProperty("Category")) {
        println(String.format("Category is passed: %s", project.Category))
        customDeviceEligibilityAnnotation = "com.emmasuzuki.espressospoondemo.utils.annotations." + project.Category
    } else {
        customDeviceEligibilityAnnotation = "com.emmasuzuki.espressospoondemo.utils.annotations.CommonCategory"
    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

project.afterEvaluate {
//    tasks.create(name: "debugCoverage", type: JacocoReport, dependsOn: "spoonDebugAndroidTest") {
    tasks.create(name: "debugCoverage", type: JacocoReport) {
        group = "Reporting"
        description = "Generate Jacoco coverage reports for the debug build."

        reports {
            xml.enabled = true
            html.enabled = true
        }

        def javaClasses = []
        def javaSrc = []
        def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
        rootProject.subprojects.each { proj ->
            project.logger.info('project names')
            project.logger.info(proj.name)
            javaClasses << fileTree(dir: "$proj.buildDir/intermediates/javac/debug", excludes: fileFilter)

            javaSrc << "$proj.projectDir/src/main/java"
        }

        print javaClasses
        print javaSrc

        sourceDirectories.setFrom(files([javaSrc]))
        classDirectories.setFrom(files([javaClasses]))
        executionData.setFrom(fileTree(dir: "$buildDir", includes: [
                "custom-report-dir/debug/coverage/merged-coverage.ec"
        ]))

//        def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
//        def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)
//        def moduleDebugTree = fileTree(dir: "/Users/vinodh.raj/Workspace/EspressoSpoonDemo/reusable-activities/build/intermediates/javac/debug", excludes: fileFilter)
//        def mainSrc = "${project.projectDir}/src/main/java"
//        def moduleMainSrc = "/Users/vinodh.raj/Workspace/EspressoSpoonDemo/reusable-activities/src/main/java"
//
//        sourceDirectories.setFrom(files([mainSrc, moduleMainSrc]))
//        classDirectories.setFrom(files([debugTree, moduleDebugTree]))
//        executionData.setFrom(fileTree(dir: "$buildDir", includes: [
//                "custom-report-dir/debug/coverage/merged-coverage.ec"
//        ]))

    }
}

//task jacocoTestReport(type: JacocoReport, dependsOn: ['spoonDebugAndroidTest']) {
//
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//
//    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
//    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)
//    def mainSrc = "${project.projectDir}/src/main/java"
//
//    sourceDirectories.setFrom(files([mainSrc, moduleSrc]))
//    classDirectories.setFrom(files([debugTree]))
//    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
//            "custom-report-dir/debug/coverage/merged-coverage.ec"
//    ]))
//}

